/*
//INSERTIONSORT
#include <iostream>

using namespace std;

int main()
{
    int numeros[] = {2,3,7,8,10,13,5};
    
    for(int i = 0; i < 7; i++)
    {
        int pos = i;
        int aux = numeros[i];
        while(pos > 0 && numeros[pos - 1] > aux)
        {
            numeros[pos] = numeros[pos - 1];
            pos--;
        }
        numeros[pos] = aux;
    }

    cout<<"\nOrden Ascendente: ";
    for(int i = 0; i < 7; i++)
    {
        cout << numeros[i] << " ";
    }

    cout<<"\nOrden Descente: ";
    for(int i = 6; i >= 0; i--)
    {
        cout << numeros[i] << " ";
    }
    cout<<"\n";

    return 0;
}*/

/*
//MERGESORT
#include <iostream>
#include <vector>
using namespace std;

void merge(vector<int>&arreglo,int inicio, int mitad, int final){
    int i,j,k;
    int elementosIzq = mitad - inicio + 1;
    int elementosDer = final - mitad;

    vector<int>izquierda(elementosIzq);
    vector<int>derecha(elementosDer);

    for(int i = 0; i < elementosIzq; i++){
        izquierda[i] = arreglo[inicio+i];
    }
    for(int j = 0; j < elementosDer; j++){
        derecha[j] = arreglo[mitad + 1 + j];
    }

    i = 0;
    j = 0;
    k = inicio;

    while(i < elementosIzq && j < elementosDer){
        if(izquierda[i] <= derecha[j]){
            arreglo[k] = izquierda[i];
            i++;
        }else{
            arreglo[k] = derecha[j];
            j++;
        }
        k++;
    }

    while(j < elementosDer){
        arreglo[k] = derecha[j];
        j++;
        k++;
    }

    while(i < elementosIzq){
        arreglo[k] = izquierda[i];
        i++;
        k++;
    }

}

void mergeSort(vector<int>&arreglo,int inicio, int final){
    if(inicio < final){
        int mitad = inicio + (final - inicio)/2;
        mergeSort(arreglo,inicio,mitad);
        mergeSort(arreglo,mitad+1,final);
        merge(arreglo,inicio,mitad,final);
    }
}

void imprimirArreglo(vector<int>arreglo){
    for(int i = 0; i < arreglo.size(); i++){
        cout << arreglo[i] << " ";
    }
    cout << endl;
}

int main(){
    vector<int> prueba1 = {12,0,6,2,9,34,1};
    imprimirArreglo(prueba1);
    mergeSort(prueba1,0,prueba1.size()-1);
    imprimirArreglo(prueba1);
    return 0;
}*/


/*
//QUICKSORT
#include <iostream>
#define MAX 1000

using namespace std;

void quickSort(int[], int);
void mostrar(int[], int);

int main()
{
    int n;
    cout << "Ingrese total de Elementos:" << endl;
    cin >> n;
    int a[n];
    for (int i = 0; i < n; i++)
    {
        cout << "Ingrese  Elemento: " << i + 1 << " : " << endl;
        cin >> a[i];
    }
    quickSort(a, n);
    mostrar(a, n);
}

void quickSort(int a[], int n)
{
    int tope, ini, fin, pos; //Variables Auxiliares
    int may[MAX], menor[MAX];
    tope = 0;
    menor[tope] = 0;
    may[tope] = n - 1;
    while (tope >= 0)
    {
        ini = menor[tope];
        fin = may[tope];
        tope--;

        int izq, der, aux;
        bool band;
        izq = ini;
        der = fin;
        pos = ini;

        band = true;

        while (band == true)
        {
            while ((a[pos] < a[der]) && (pos != der))
                der--;

            if (pos == der)
                band = false;
            else
            {
                aux = a[pos];
                a[pos] = a[der];
                a[der] = aux;
                pos = der;
            }

            while ((a[pos] > a[izq]) && (pos != izq))
                izq++;

            if (pos == izq)
                band = false;
            else
            {
                aux = a[pos];
                a[pos] = a[izq];
                a[izq] = aux;
                pos = izq;
            }
        }

        if (ini <= (pos - 1))
        {
            tope++;
            menor[tope] = ini;
            may[tope] = pos - 1;
        }

        if (fin >= (pos + 1))
        {
            tope++;
            menor[tope] = pos + 1;
            may[tope] = fin;
        }
    }
}

void mostrar(int a[], int n)
{
    cout << "Elementos Ordenados:" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << "[" << a[i] << "]";
    }
}*/
